<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GateWay网关访问服务出现503的问题解决</title>
    <link href="/cxlittlecute/674d8191.html"/>
    <url>/cxlittlecute/674d8191.html</url>
    
    <content type="html"><![CDATA[<h1 id="GateWay网关访问服务出现503的问题解决"><a href="#GateWay网关访问服务出现503的问题解决" class="headerlink" title="GateWay网关访问服务出现503的问题解决"></a>GateWay网关访问服务出现503的问题解决</h1><p>对于这个问题也是困扰了自己很久，今天下定决定要把它干掉。这个问题很坑，建议使用IDEA的朋友都可以看一看。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在分布式服务中，使用GateWay网关进行服务请求路由的统一管理，它是系统对外的唯一入口。为了让网关能正常发送调用其他服务，我使用到了Nacos服务注册中心。</p><p>正是这样出现了，我通过服务端口，能正常访问接口返回数据，通过网关访问有时可以有时不行的情况（也就是出现503的状态码反馈）。</p><p>HTTP状态码503指的是web服务器不能处理HTTP请求。原因大致如下：</p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200716131929.png" srcset="/img/loading.gif" alt="avator"></p><p>那么根据上面这四个原因我还是没有分析出为什么会出现这个问题。于是我开始一步步排查问题。</p><ol><li><p>我首先认为是我GateWay网关，拦截配置的问题，可是我的情况是有时出现503，有时又能通过网关正常访问，所以暂时排除了这种情况。</p></li><li><p>是否本身的单体服务有问题，但是通过postman的测试，通过服务的端口访问接口，都能正常返回数据。所以也暂时排除这种情况。</p></li><li><p>Nacos注册中心的问题。</p></li></ol><p>那基本能确定是Nacos注册中心的问题了，但也不完全是Nacos的锅。</p><p>再次分析：</p><p>F12查看Network，请求的发送情况，发现OPTIONS预检请求是正常发送的，但发送真正的请求的时候出现了503的错误。如下图:</p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200716133417.png" srcset="/img/loading.gif" alt="avator"></p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200716133338.png" srcset="/img/loading.gif" alt="avator"></p><p>接着我点开了Preview（预览功能），看到了错误提示：</p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200716133611.png" srcset="/img/loading.gif" alt="avator"></p><p>我们可以通过错误提示很清晰的看到message的反馈，就是发现不了我的product服务。</p><p>和我们判断的没错是nacos的问题，于是我进入nacos查看服务是否注册成功。</p><p>这里就发现了一个很奇怪的现象，正常的我们刷新nacos的界面服务是不会掉的，但是我的product商品服务，一会有一会儿又没有，刚开始我发现了这个问题，但没有引起注意，也就导致这个问题之前一直没有得到解决。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>于是，我抱着再试一试的心态，将该服务的端口号从10000改为了8100，也就是改为了其他的数（或者修改一下服务名），这个服务就在nacos注册中心稳定了。（前提是确保你的服务Nacos配置没有问题）</p><p>这其实是一个很容易解决的bug，但是之前网上找过都没有得到好的解决。</p><p>让我想到了idea在使用过程中确实存在一些bug，常见的就是</p><ol><li><p>创建继承maven项目数量多了之后，项目结构就会不一样，需要手动修改，或者更换项目名才能解决。</p></li><li><p>使用springboot的过程中有些端口无法使用，这种无法使用是由于idea和系统的问题，你能正常跑通你的项目，但是这个项目你无法通过客户端访问，只要访问就是500服务器错误。</p></li></ol><hr><p>同时这里强调，不是因为什么端口被占用的问题，端口如果被占用，连服务都是无法启动的，所以这就是一些简单又很坑人的地方。</p><p>如果您有幸看到了这篇文章，希望对您有帮助，解决到您的问题。</p>]]></content>
    
    
    <categories>
      
      <category>GateWay</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GateWay</tag>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot出现Possibly consider using a shorter maxLifetime value警告问题</title>
    <link href="/cxlittlecute/4e6c6273.html"/>
    <url>/cxlittlecute/4e6c6273.html</url>
    
    <content type="html"><![CDATA[<h1 id="Springboot出现Possibly-consider-using-a-shorter-maxLifetime-value警告问题"><a href="#Springboot出现Possibly-consider-using-a-shorter-maxLifetime-value警告问题" class="headerlink" title="Springboot出现Possibly consider using a shorter maxLifetime value警告问题"></a>Springboot出现Possibly consider using a shorter maxLifetime value警告问题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>这是我经常遇到的一个问题，当我们使用Springboot连接数据库的时候（Springboot默认使用的是HikariCP），如果长时间的静默没有请求连接池，那么就会出现如下warn：</p><pre><code class="hljs routeros">[http-nio-7003-exec-10] WARN  com.zaxxer.hikari.pool.PoolBase - HikariPool-1 - Failed <span class="hljs-keyword">to</span> validate<span class="hljs-built_in"> connection </span>com.mysql.cj.jdbc.ConnectionImpl@3987b59f (<span class="hljs-literal">No</span> operations allowed after<span class="hljs-built_in"> connection </span>closed.). Possibly consider using a shorter maxLifetime value.</code></pre><p>我们可以看到这个warn的最后一句话， Possibly consider using a shorter maxLifetime value（让我们考虑使用一个更小的maxLifetime值）。</p><p>看到这里大家肯定会疑惑maxLifeTime是什么？</p><p>我们先来看看官方文档对参数的说明：<a href="https://github.com/brettwooldridge/HikariCP" target="_blank" rel="noopener">https://github.com/brettwooldridge/HikariCP</a></p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200716085042.png" srcset="/img/loading.gif" alt="avator"></p><p>此属性控制池中连接的最长生存期。一个正在使用的连接永远不会失效，只有当它关闭时，它才会被移除。在逐个连接的基础上，应用较小的负衰减以避免池中的大规模灭绝。我们强烈建议设置此值，并且它应该比任何数据库或基础设施施加的连接时间限制短几秒。值为0表示没有最长生存期（无限生存期），当然取决于idleTimeout设置。默认值：1800000（30分钟）。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>其实这个问题很好解决，就是在配置文件中添加HikariCP的参数设置，也就是将maxLifeTime的值变小。</p><pre><code class="hljs stylus">spring<span class="hljs-selector-class">.datasource</span><span class="hljs-selector-class">.hikari</span><span class="hljs-selector-class">.max-lifetime</span> =<span class="hljs-number">120000</span></code></pre><p>同时这里需要注意的是，如果这样设置后出现另外的报错：</p><pre><code class="hljs applescript">idleTimeout <span class="hljs-keyword">is</span> close <span class="hljs-keyword">to</span> <span class="hljs-keyword">or</span> more than maxLifetime, disabling <span class="hljs-keyword">it</span>.</code></pre><p>说明你设置的maxLifeTime的值低于了idleTimeout。</p><p>ideaTimeOut是连接允许在池中闲置的最长时间，它有个规则：如果idleTimeout+1秒&gt;maxLifetime 且 maxLifetime&gt;0，则会被重置为0（代表永远不会退出）；如果idleTimeout!=0且小于10秒，则会被重置为10秒。</p><p>所以最好是将maxLifeTime和idleTimeOut的值一起按照要求修改。</p><p>文档里面的参数都可以在配置文件中修改默认值，可以根据自己的需要来。</p><p>当然说到这里其实自己也是有疑问的，为什么降低了maxLifeTime就可以避免发生这个问题？现在只是找到方法解决掉了这个问题，但是原理不是很明白，查阅到了相关资料我会进行补充。有想法的朋友可以评论或私信我，互相交流。</p><hr><p>以上的理解如果有偏差，可以通过关于页的联系方式第一时间联系我，我将做好修改更正工作。期待您的回复和反馈。</p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
      <category>HikariCP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>HikariCP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云oss上传报错Invalid according to Policy Policy expired</title>
    <link href="/cxlittlecute/1d5383b1.html"/>
    <url>/cxlittlecute/1d5383b1.html</url>
    
    <content type="html"><![CDATA[<h1 id="阿里云oss上传报错Invalid-according-to-Policy-Policy-expired"><a href="#阿里云oss上传报错Invalid-according-to-Policy-Policy-expired" class="headerlink" title="阿里云oss上传报错Invalid-according-to-Policy-Policy-expired"></a>阿里云oss上传报错Invalid-according-to-Policy-Policy-expired</h1><p>阿里云oss上传使用的是服务端签名后直传；通过服务端生成上传签名，前端使用服务端生成的签名上传文件。</p><p>同时，在这里先说一下为什么要使用服务端签名后直传。</p><p>之前使用OSS时，是让文件过自己的服务器，然后通过自己的服务器传到OSS的服务器，也就是这样：</p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200715175217.png" srcset="/img/loading.gif" alt="avator"></p><p>通过上面的这种直传的方式，导致我们的服务端压力很大。虽然我们可以使用JS直接前端传递，但是这样会暴露我们的AccessKeyID和AcessKeySecret，会有安全隐患。</p><p>所以选择了，接下来的这种服务端签名的方式上传：</p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200715175427.png" srcset="/img/loading.gif" alt="avator"></p><p>正是使用了这种方式出现了以下这个问题：</p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200715174130.png" srcset="/img/loading.gif" alt="avator"></p><p>查询阿里云文档可知错误原因：</p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200715174653.png" srcset="/img/loading.gif" alt="avator"></p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p> 生成签名时，官方代码中的参数expireTime默认是30秒，改为更大的时间。</p><h3 id="代码演示-解决办法"><a href="#代码演示-解决办法" class="headerlink" title="代码演示 解决办法"></a>代码演示 解决办法</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Osscontroller</span> </span>&#123;    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;spring.cloud.alicloud.oss.endpoint&#125;"</span>)    <span class="hljs-keyword">private</span> String endpoint;    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;spring.cloud.alicloud.oss.bucket&#125;"</span>)    <span class="hljs-keyword">private</span> String bucket;    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;spring.cloud.alicloud.access-key&#125;"</span>)    <span class="hljs-keyword">private</span> String accessId;    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;spring.cloud.alicloud.secret-key&#125;"</span>)    <span class="hljs-keyword">private</span> String accessKey;    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/oss/policy"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">policy</span><span class="hljs-params">()</span> </span>&#123;        String host = <span class="hljs-string">"https://"</span> + bucket + <span class="hljs-string">"."</span> + endpoint; <span class="hljs-comment">// host的格式为 bucketname.endpoint</span>        <span class="hljs-comment">// callbackUrl为 上传回调服务器的URL，请将下面的IP和Port配置为您自己的真实信息。</span>        <span class="hljs-comment">//String callbackUrl = "http://88.88.88.88:8888";</span>        String format = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd"</span>).format(<span class="hljs-keyword">new</span> Date());        String dir = format+<span class="hljs-string">"/"</span>; <span class="hljs-comment">// 用户上传文件时指定的前缀。</span>        <span class="hljs-comment">// 创建OSSClient实例。</span>        OSS ossClient = <span class="hljs-keyword">new</span> OSSClientBuilder().build(endpoint, accessId, accessKey);        Map&lt;String, String&gt; respMap = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">long</span> expireTime = <span class="hljs-number">60</span>; <span class="hljs-comment">//增大这里的时间</span>            <span class="hljs-keyword">long</span> expireEndTime = System.currentTimeMillis() + expireTime * <span class="hljs-number">1000</span>;            Date expiration = <span class="hljs-keyword">new</span> Date(expireEndTime);            <span class="hljs-comment">// PostObject请求最大可支持的文件大小为5 GB，即CONTENT_LENGTH_RANGE为5*1024*1024*1024。</span>            PolicyConditions policyConds = <span class="hljs-keyword">new</span> PolicyConditions();            policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, <span class="hljs-number">0</span>, <span class="hljs-number">1048576000</span>);            policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, dir);            String postPolicy = ossClient.generatePostPolicy(expiration, policyConds);            <span class="hljs-keyword">byte</span>[] binaryData = postPolicy.getBytes(<span class="hljs-string">"utf-8"</span>);            String encodedPolicy = BinaryUtil.toBase64String(binaryData);            String postSignature = ossClient.calculatePostSignature(postPolicy);            respMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;String, String&gt;();            respMap.put(<span class="hljs-string">"accessid"</span>, accessId);            respMap.put(<span class="hljs-string">"policy"</span>, encodedPolicy);            respMap.put(<span class="hljs-string">"signature"</span>, postSignature);            respMap.put(<span class="hljs-string">"dir"</span>, dir);            respMap.put(<span class="hljs-string">"host"</span>, host);            respMap.put(<span class="hljs-string">"expire"</span>, String.valueOf(expireEndTime / <span class="hljs-number">1000</span>));        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            <span class="hljs-comment">// Assert.fail(e.getMessage());</span>            System.out.println(e.getMessage());        &#125; <span class="hljs-keyword">finally</span> &#123;            ossClient.shutdown();        &#125;        <span class="hljs-keyword">return</span> R.ok().put(<span class="hljs-string">"data"</span>,respMap);    &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo消除中文路径</title>
    <link href="/cxlittlecute/8ce042f1.html"/>
    <url>/cxlittlecute/8ce042f1.html</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo消除中文路径"><a href="#Hexo消除中文路径" class="headerlink" title="Hexo消除中文路径"></a>Hexo消除中文路径</h1><p>我们博客中的文章标题，一般都会有中文出现，同时Hexo默认也是会把你的title放在路径访问的最后，也就是xxx.html。</p><p>由于路径中有中文的存在，如果你想根据URL进行操作的时候就会被浏览器编码，也就是URL code字符编码。</p><pre><code class="hljs llvm">https://ccctop.cn/<span class="hljs-number">2020</span>/<span class="hljs-number">07</span>/<span class="hljs-number">13</span>/Jenkins<span class="hljs-symbol">%E6</span><span class="hljs-symbol">%89</span><span class="hljs-symbol">%A7</span><span class="hljs-symbol">%E8</span><span class="hljs-symbol">%A1</span><span class="hljs-symbol">%8</span>Cshell<span class="hljs-symbol">%E5</span><span class="hljs-symbol">%91</span><span class="hljs-symbol">%BD</span><span class="hljs-symbol">%E4</span><span class="hljs-symbol">%BB</span><span class="hljs-symbol">%A4</span><span class="hljs-symbol">%EF</span><span class="hljs-symbol">%BC</span><span class="hljs-symbol">%8</span>C<span class="hljs-symbol">%E6</span><span class="hljs-symbol">%8</span>F<span class="hljs-symbol">%90</span><span class="hljs-symbol">%E7</span><span class="hljs-symbol">%A4</span><span class="hljs-symbol">%BAcommand-not-found</span><span class="hljs-symbol">%E8</span><span class="hljs-symbol">%A7</span><span class="hljs-symbol">%A3</span><span class="hljs-symbol">%E5</span><span class="hljs-symbol">%86</span><span class="hljs-symbol">%B3</span>/</code></pre><h2 id="这种中文URL的不缺点："><a href="#这种中文URL的不缺点：" class="headerlink" title="这种中文URL的不缺点："></a>这种中文URL的不缺点：</h2><ol><li><p>关键词被编译后，URL会变得很长，这是搜索引擎不建议的，但并非不能使用;也就是不利于SEO。</p></li><li><p>使用被引用，中文URL在转码后会变成形如：%E5%A9%9A%E7%BA%B1 的结构，一些编辑器支持的问题会造成错误链接地址或错误的URL识别、分割 ，甚至有些网站会产生状态为404的引用指向。</p></li></ol><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>一种是把中文路径变为拼音，另一种就是进行转换编码。在 Hexo 根目录下的 _config.yml 文件中，修改或新增配置项：</p><p>拼音：</p><pre><code class="hljs ada">npm i hexo-permalink-pinyin <span class="hljs-comment">--save</span></code></pre><pre><code class="hljs dts"><span class="hljs-symbol">permalink_pinyin:</span><span class="hljs-symbol">  enable:</span> true<span class="hljs-symbol">  separator:</span> <span class="hljs-string">'-'</span> <span class="hljs-meta"># default: <span class="hljs-string">'-'</span></span></code></pre><p>编码：</p><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-abbrlink <span class="hljs-comment">--save</span></code></pre><pre><code class="hljs dts"><span class="hljs-meta"># permalink: :title/</span><span class="hljs-symbol">permalink:</span> archives/:abbrlink.html<span class="hljs-symbol">abbrlink:</span><span class="hljs-symbol">  alg:</span> crc32  <span class="hljs-meta"># 算法：crc16(default) and crc32</span><span class="hljs-symbol">  rep:</span> hex    <span class="hljs-meta"># 进制：dec(default) and hex</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins执行shell命令，提示command not found解决</title>
    <link href="/cxlittlecute/61702.html"/>
    <url>/cxlittlecute/61702.html</url>
    
    <content type="html"><![CDATA[<h1 id="Command-not-found"><a href="#Command-not-found" class="headerlink" title="Command not found"></a>Command not found</h1><p>jenkins执行shell命令，有时会提示“Command not found”—-处理方案。</p><p>1.首先，分析是linux环境的问题还是Jenkins的问题。</p><p>如果登录linux，shell命令不可以执行，同样提示“Command not found”，则是环境变量设置失败，需要配置环境变量、/etc/profile。</p><p>如果登录linux，shell命令可以执行，则是jenkins没有加载/etc/profile导致。</p><p>我就是第二种情况。那就是得让jenkins执行我们实际的shell命令之前，执行识别环境变量的shell命令。让Jenkins先读取/etc/profile等的内容。</p><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">source</span> ~/.bash_profile<span class="hljs-built_in">source</span> /etc/profile<span class="hljs-built_in">cd</span>..等其他shell命令</code></pre>]]></content>
    
    
    <categories>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云全站加速HTTPS证书无法开启问题解决</title>
    <link href="/cxlittlecute/10754.html"/>
    <url>/cxlittlecute/10754.html</url>
    
    <content type="html"><![CDATA[<h1 id="阿里云全站加速HTTPS证书无法开启问题解决"><a href="#阿里云全站加速HTTPS证书无法开启问题解决" class="headerlink" title="阿里云全站加速HTTPS证书无法开启问题解决"></a>阿里云全站加速HTTPS证书无法开启问题解决</h1><p>全站加速（Dynamic Route for Content Delivery Network）是阿里云自主研发的融合了动态加速和静态加速技术的CDN产品。该产品一站式解决了页面动静态资源混杂、跨运营商、网络不稳定、单线源站、突发流量、网络拥塞等诸多因素导致的响应慢、丢包、服务不稳定的问题，提升全站性能和用户体验。</p><p>1.选择添加域名</p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200713160216.png" srcset="/img/loading.gif" alt="avatar"></p><p>2.添加域名 类型IP（IP就是你服务器IP）</p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200713160556.png" srcset="/img/loading.gif" alt="avatar"></p><p>3.HTTPS设置</p><p>我就是在这个地方出现问题的。</p><p>之前没有领取HTTPS证书，所以在这里想一起申请了，也就是选择</p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200713162446.png" srcset="/img/loading.gif" alt="avatar"></p><p>免费证书，点击确定后，弹窗显示了设置成功，但是HTTPS的设置一直都是未开启的状态。</p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200713162917.png" srcset="/img/loading.gif" alt="avatar"></p><p>由于不知道问题出现在什么地方，所以找了一下客服。客服的回复如下：</p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200713162759.png" srcset="/img/loading.gif" alt="avatar"></p><p>之后发现出现这个问题的原因是，我自己添加的域名为泛域名，也就是域名前我带了*，这样可能会导致无法颁发证书。</p><p>随后我将*去掉，配置为www或者直接解析域名@,再次去申请证书就可以了。</p>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云域名配置</title>
    <link href="/cxlittlecute/202.html"/>
    <url>/cxlittlecute/202.html</url>
    
    <content type="html"><![CDATA[<h1 id="阿里云域名配置"><a href="#阿里云域名配置" class="headerlink" title="阿里云域名配置"></a>阿里云域名配置</h1><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>登录阿里云，选择域名服务，选择你要购买的域名类型进行购买。</p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200713152655.png" srcset="/img/loading.gif" alt="avatar"></p><h2 id="域名备案"><a href="#域名备案" class="headerlink" title="域名备案"></a>域名备案</h2><p><a href="https://beian.aliyun.com/" target="_blank" rel="noopener">https://beian.aliyun.com/</a></p><p>必要进行域名备案才能真正使用上你的域名，备案需要填写你购买域名的用途和你个人信息等，然后进行申请，审批时长大概二十天左右。</p><p>期间保持电话畅通，因为阿里云的客服小姐姐小哥哥可能会给你打电话，如果你有什么信息需要修改的可以第一时间得到反馈。然后就是耐心的等待。</p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200713152836.png" srcset="/img/loading.gif" alt="avatar"></p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>当你把以上的步骤完成后，就可以进入域名的管理控制台。<br><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200713153119.png" srcset="/img/loading.gif" alt="avatar"></p><p>点击解析 配置你的解析设置：<br><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200713153540.png" srcset="/img/loading.gif" alt="avatar"></p><p>这样只需要对应你的IP进行配置就可以实现使用你自己的域名解析到IP上了。</p>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客搭建与部署</title>
    <link href="/cxlittlecute/19858.html"/>
    <url>/cxlittlecute/19858.html</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客搭建与部署"><a href="#Hexo博客搭建与部署" class="headerlink" title="Hexo博客搭建与部署"></a>Hexo博客搭建与部署</h1><h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。</p><p>文档地址：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p><h2 id="如何搭建（参照Hexo文档）"><a href="#如何搭建（参照Hexo文档）" class="headerlink" title="如何搭建（参照Hexo文档）"></a>如何搭建（参照Hexo文档）</h2><p>安装前提：node.js和Git</p><p>node: <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><p>Git: <a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span></code></pre><pre><code class="hljs cmd">$ hexo init &lt;folder&gt;$ <span class="hljs-built_in">cd</span> &lt;folder&gt;$ npm install</code></pre><p>Hexo的安装过程比较简单，主要参照文档就行了。</p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>hexo项目结构安装好后，就可以选择一个合适的主题，官网有主题的选项，同时也可以去百度上看一下别人选择的主题做出来的效果，有看到喜欢的就用相同的主题。</p><p>我用的主题为：Fluid&emsp;&emsp;  <a href="https://hexo.fluid-dev.com/docs/" target="_blank" rel="noopener">https://hexo.fluid-dev.com/docs/</a></p><p>这个主题支持的插件基本还可以，界面还是简介大方。</p><p>那么我们只需要下载好相应的主题，按照Hexo官方文档（注意不是主题文档）修改_config.yml这个文件中的内容就可以了。</p><p>很多细小的配置在Fluid主题文档中都有，基本可以把文档看一遍，修改好你想要的设置。</p><h2 id="主题设置细节说明"><a href="#主题设置细节说明" class="headerlink" title="主题设置细节说明"></a>主题设置细节说明</h2><p>我的博客中使用了评论和统计插件。</p><p>评论-Valine <a href="https://valine.js.org/" target="_blank" rel="noopener">https://valine.js.org/</a></p><p>统计-leancloud <a href="https://www.leancloud.cn/" target="_blank" rel="noopener">https://www.leancloud.cn/</a></p><p>评论和计数的后台都可以通过lencloud的后台系统管理，而且比较稳定。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>重点说一下部署，因为Hexo部署上去的其实就是Public下面的html静态文件，所以可以把public下的文件放置在任何地方。</p><p>文档推荐的是放github下，但是你会发现如果你不翻墙的话，图片很难加载出来，gitee也可以，但是如果你想配置自定义域名的话，就必须要购买gitee自定义域名的产品。</p><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>我使用的是PicGo+Gitee(码云)搭建自己的图床。</p><p>1.将PicGO下载下来，然后安装插件</p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200713133658.png" srcset="/img/loading.gif" alt="avatar"></p><p>2.配置Gitee<br>点击自己gitee头像-&gt;设置，左边有一个私人令牌，点击右上角生成新令牌，只选择projects,如下图：</p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200713150257.png" srcset="/img/loading.gif" alt="avatar"></p><p>注意：私人令牌token只会显示一次，如果没有复制成功只能删除后重新获取。</p><p>3.设置插件githubPlus</p><p><img src="https://gitee.com/ouyang_shenglin/blogImage/raw/master/img/20200713150827.png" srcset="/img/loading.gif" alt="avatar"></p><p>测试：记得修改PicGO中上传区中的图片上传改为:图片上床-githubLPlus这样就可以根据路径来访问你的图片了。</p><pre><code class="hljs stata">最后，感谢Yazzz带我入坑，友链里有<span class="hljs-keyword">ta</span>哦~</code></pre>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
